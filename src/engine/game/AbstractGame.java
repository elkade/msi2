// Copyright 2016 theaigames.com (developers@theaigames.com)

//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at

//        http://www.apache.org/licenses/LICENSE-2.0

//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//	
//    For the full copyright and license information, please view the LICENSE
//    file that was distributed with this source code.

package engine.game;

import java.io.IOException;

import bot.BotParser;
import engine.engine.Engine;
import engine.engine.Logic;
import engine.engine.io.IOPlayer;
import engine.game.player.AbstractPlayer;

/**
 * abstract class AbstractGame
 * 
 * DO NOT EDIT THIS FILE
 * 
 * Extend this class with your main method. In the main method, create an
 * instance of your Logic and run setupEngine() and runEngine()
 * 
 * @author Jim van Eeden <jim@starapple.nl>
 */

public abstract class AbstractGame implements Logic {

    public Engine engine;
    public GameHandler processor;

    public int maxRounds;

    public BotParser TEST_BOT_1; // command for the test bot in DEV_MODE
    public BotParser TEST_BOT_2; // command for the test bot in DEV_MODE
    public int NUM_TEST_BOTS = 2; // number of bots for this game

    public AbstractGame() {
        maxRounds = -1; // set this later if there is a maximum amount of rounds for this game
    }

    /**
     * Partially sets up the engine
     * @param args : command line arguments passed on running of application
     * @throws IOException
     * @throws RuntimeException
     */
    public void setupEngine(String args[]) throws IOException, RuntimeException {

        // create engine
        this.engine = new Engine();

        this.engine.addPlayer(TEST_BOT_1, "ID_1");
        this.engine.addPlayer(TEST_BOT_2, "ID_2");
    }

    /**
     * Implement this class. Set logic in the engine and start it to run the game
     */
    protected abstract void runEngine() throws Exception;

    /**
     * @return : True when the game is over
     */
    @Override
    public boolean isGameOver() {
        if (this.processor.isGameOver() || (this.maxRounds >= 0 && this.processor.getRoundNumber() > this.maxRounds)) {
            return true;
        }
        return false;
    }

    public AbstractPlayer getWinner() {
        return this.processor.getWinner();
    }

    /**
     * Play one round of the game
     * @param roundNumber : round number
     */
    @Override
    public void playRound(int roundNumber) {
        for (IOPlayer ioPlayer : this.engine.getPlayers())
            ioPlayer.addToDump(String.format("Round %d", roundNumber));

        this.processor.playRound(roundNumber);
    }

    /**
     * close the bot processes, save, exit program
     */
    @Override
    public void finish() throws Exception {
        // stop the bots
        for (IOPlayer ioPlayer : this.engine.getPlayers())
            ioPlayer.finish();
    }

    /**
     * Does everything that is needed to store the output of a game
     */
    public void saveGame() {

        // save results to file here
        //String playedGame = this.processor.getPlayedGame();
        //System.out.println(playedGame);
    }
}
